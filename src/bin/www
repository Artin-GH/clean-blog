#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("exp-blog:server");
const http = require("http");
const mongoose = require("mongoose");
const path = require("path");
const { exec } = require("child_process");
require("dotenv").config();

const port = normalizePort(process.env.PORT || "3000");
const hostname = normalizePort(process.env.HOSTNAME || "localhost");
app.set("port", port);

const mongoUrl = process.env.MONGO_URL || ''
mongoose.connect(mongoUrl);

const server = http.createServer(app);

exec(
  `npx sass -w ${path.join(__dirname, "../public/scss/styles.scss")}:${path.join(
    __dirname,
    "../public/css/styles.css"
  )}`,
  (err, stdout, stderr) => {
    if (err) {
      console.log(err.message);
      return;
    }
    if (stderr) {
      console.log(stderr);
      return;
    }
    console.log(stdout);
  }
);

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

console.log(`Listening on http://${hostname}:${port}`);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
